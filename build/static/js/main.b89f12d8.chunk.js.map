{"version":3,"sources":["App.js","index.js"],"names":["SystemProgram","web3","arr","Object","values","kp","_keypair","secretKey","secret","Uint8Array","baseAccount","Keypair","fromSecretKey","programID","PublicKey","idl","metadata","address","network","clusterApiUrl","opts","App","useState","walletAddress","setWalletAddress","inputValue","setInputValue","gifList","setGifList","walletConnected","a","window","solana","isPhantom","console","log","connect","onlyIfTrusted","response","publicKey","toString","connectWallet","sendGif","length","provider","getProvider","program","Program","rpc","createGif","accounts","getGifList","onInputChange","event","target","value","connection","Connection","Provider","account","fetch","createGifAccount","startStuffOff","user","wallet","systemProgram","programId","signers","useEffect","onLoad","addEventListener","removeEventListener","className","onClick","type","placeholder","onChange","map","item","index","src","gifLink","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b89f12d8.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport \"./App.css\";\r\n\r\nimport { Connection, PublicKey, clusterApiUrl } from \"@solana/web3.js\";\r\nimport { Program, Provider, web3 } from \"@project-serum/anchor\";\r\n\r\nimport idl from \"./idl.json\";\r\nimport kp from \"./keypair.json\";\r\n\r\nconst { SystemProgram } = web3;\r\n\r\nconst arr = Object.values(kp._keypair.secretKey);\r\nconst secret = new Uint8Array(arr);\r\nconst baseAccount = web3.Keypair.fromSecretKey(secret);\r\n\r\nconst programID = new PublicKey(idl.metadata.address);\r\n\r\n// Set our network to devent.\r\nconst network = clusterApiUrl(\"devnet\");\r\n\r\n// Control's how we want to acknowledge when a trasnaction is \"done\".\r\nconst opts = {\r\n  preflightCommitment: \"processed\",\r\n};\r\n\r\nconst App = () => {\r\n  const [walletAddress, setWalletAddress] = useState(null);\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n  const [gifList, setGifList] = useState([]);\r\n\r\n  const walletConnected = async () => {\r\n    try {\r\n      const { solana } = window;\r\n\r\n      if (solana) {\r\n        if (solana.isPhantom) {\r\n          console.log(\"Phantom detected\");\r\n\r\n          const response = await solana.connect({ onlyIfTrusted: true });\r\n          console.log(\r\n            \"Connected with Public Key:\",\r\n            response.publicKey.toString()\r\n          );\r\n\r\n          setWalletAddress(response.publicKey.toString());\r\n        }\r\n      }\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  };\r\n\r\n  const connectWallet = async () => {\r\n    const { solana } = window;\r\n\r\n    if (solana) {\r\n      const response = await solana.connect();\r\n      console.log(\"Connected with Public Key:\", response.publicKey.toString());\r\n      setWalletAddress(response.publicKey.toString());\r\n    }\r\n  };\r\n\r\n  const sendGif = async () => {\r\n    if (inputValue.length === 0) {\r\n      console.log(\"No gif link given!\");\r\n      return;\r\n    }\r\n    console.log(\"Gif link:\", inputValue);\r\n    try {\r\n      const provider = getProvider();\r\n      const program = new Program(idl, programID, provider);\r\n\r\n      await program.rpc.createGif(inputValue, {\r\n        accounts: {\r\n          baseAccount: baseAccount.publicKey,\r\n        },\r\n      });\r\n      console.log(\"GIF sucesfully sent to program\", inputValue);\r\n\r\n      await getGifList();\r\n    } catch (error) {\r\n      console.log(\"Error sending GIF:\", error);\r\n    }\r\n  };\r\n\r\n  const renderNotConnectedContainer = () => (\r\n    <button\r\n      className=\"cta-button connect-wallet-button\"\r\n      onClick={connectWallet}\r\n    >\r\n      Connect to Wallet\r\n    </button>\r\n  );\r\n\r\n  const onInputChange = (event) => {\r\n    setInputValue(event.target.value);\r\n  };\r\n\r\n  const getProvider = () => {\r\n    const connection = new Connection(network, opts.preflightCommitment);\r\n    const provider = new Provider(\r\n      connection,\r\n      window.solana,\r\n      opts.preflightCommitment\r\n    );\r\n    return provider;\r\n  };\r\n\r\n  const getGifList = async () => {\r\n    try {\r\n      const provider = getProvider();\r\n      const program = new Program(idl, programID, provider);\r\n      const account = await program.account.baseAccount.fetch(\r\n        baseAccount.publicKey\r\n      );\r\n\r\n      console.log(\"Got the account\", account);\r\n      setGifList(account.gifList);\r\n    } catch (error) {\r\n      console.log(\"Error in getGifs: \", error);\r\n      setGifList(null);\r\n    }\r\n  };\r\n\r\n  const createGifAccount = async () => {\r\n    try {\r\n      const provider = getProvider();\r\n      const program = new Program(idl, programID, provider);\r\n\r\n      await program.rpc.startStuffOff({\r\n        accounts: {\r\n          baseAccount: baseAccount.publicKey,\r\n          user: provider.wallet.publicKey,\r\n          systemProgram: SystemProgram.programId,\r\n        },\r\n        signers: [baseAccount],\r\n      });\r\n      console.log(\r\n        \"Created a new BaseAccount w/ address:\",\r\n        baseAccount.publicKey.toString()\r\n      );\r\n      await getGifList();\r\n    } catch (error) {\r\n      console.log(\"Error creating BaseAccount account:\", error);\r\n    }\r\n  };\r\n\r\n  const renderConnectedContainer = () => {\r\n    if (gifList === null) {\r\n      return (\r\n        <div className=\"connected-container\">\r\n          <button\r\n            className=\"cta-button submit-gif-button\"\r\n            onClick={createGifAccount}\r\n          >\r\n            Do One-Time Initialization For GIF Program Account\r\n          </button>\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div className=\"connected-container\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Enter gif link!\"\r\n            value={inputValue}\r\n            onChange={onInputChange}\r\n          />\r\n          <button className=\"cta-button submit-gif-button\" onClick={sendGif}>\r\n            Submit\r\n          </button>\r\n          <div className=\"gif-grid\">\r\n            {gifList.map((item, index) => (\r\n              <div className=\"gif-item\" key={index}>\r\n                <img src={item.gifLink} />\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const onLoad = async () => {\r\n      await walletConnected();\r\n    };\r\n    window.addEventListener(\"load\", onLoad);\r\n    return () => window.removeEventListener(\"load\", onLoad);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (walletAddress) {\r\n      console.log(\"Fetching GIF list...\");\r\n\r\n      getGifList();\r\n    }\r\n  }, [walletAddress]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className={walletAddress ? \"authed-container\" : \"container\"}>\r\n        <div className=\"header-container\">\r\n          <p className=\"header\">ðŸ–¼ Simpsons portal</p>\r\n          <p className=\"sub-text\">View your Simpsons GIFs on Solanaâœ¨</p>\r\n        </div>\r\n        {!walletAddress && renderNotConnectedContainer()}\r\n        {walletAddress && renderConnectedContainer()}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}